#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from BEService import TalkService
from BEService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  AcceptChatInvitationResponse acceptChatInvitation(AcceptChatInvitationRequest request)')
    print('  AcceptChatInvitationByTicketResponse acceptChatInvitationByTicket(AcceptChatInvitationByTicketRequest request)')
    print('  void blockContact(i32 reqSeq, string id)')
    print('  CancelChatInvitationResponse cancelChatInvitation(CancelChatInvitationRequest request)')
    print('  CreateChatResponse createChat(CreateChatRequest request)')
    print('  DeleteSelfFromChatResponse deleteSelfFromChat(DeleteSelfFromChatRequest request)')
    print('  DeleteOtherFromChatResponse deleteOtherFromChat(DeleteOtherFromChatRequest request)')
    print('  FetchOperationsResponse fetchOperations(FetchOperationsRequest request)')
    print('   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)')
    print('   findAndAddContactsByMid(i32 reqSeq, string mid, ContactType type, string reference)')
    print('   findAndAddContactsByUserid(i32 reqSeq, string searchId, string reference)')
    print('  Contact findContactByUserid(string userid)')
    print('  FindChatByTicketResponse findChatByTicket(FindChatByTicketRequest request)')
    print('  GetAllChatMidsResponse getAllChatMids(GetAllChatMidsRequest request, SyncReason syncReason)')
    print('  Profile getProfile(SyncReason syncReason)')
    print('  Contact getContact(string id)')
    print('  string getCountryWithRequestIp()')
    print('  i64 getServerTime()')
    print('   getContacts( ids)')
    print('   getAllContactIds(SyncReason syncReason)')
    print('  GetChatsResponse getChats(GetChatsRequest request)')
    print('  InviteIntoChatResponse inviteIntoChat(InviteIntoChatRequest request)')
    print('  ReissueChatTicketResponse reissueChatTicket(ReissueChatTicketRequest request)')
    print('  RejectChatInvitationResponse rejectChatInvitation(RejectChatInvitationRequest request)')
    print('  Message sendMessage(i32 seq, Message message)')
    print('  void unsendMessage(i32 seq, string messageId)')
    print('  UpdateChatResponse updateChat(UpdateChatRequest request)')
    print('  void updateProfileAttribute(i32 reqSeq, ProfileAttribute attr, string value)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = TalkService.Client(protocol)
transport.open()

if cmd == 'acceptChatInvitation':
    if len(args) != 1:
        print('acceptChatInvitation requires 1 args')
        sys.exit(1)
    pp.pprint(client.acceptChatInvitation(eval(args[0]),))

elif cmd == 'acceptChatInvitationByTicket':
    if len(args) != 1:
        print('acceptChatInvitationByTicket requires 1 args')
        sys.exit(1)
    pp.pprint(client.acceptChatInvitationByTicket(eval(args[0]),))

elif cmd == 'blockContact':
    if len(args) != 2:
        print('blockContact requires 2 args')
        sys.exit(1)
    pp.pprint(client.blockContact(eval(args[0]), args[1],))

elif cmd == 'cancelChatInvitation':
    if len(args) != 1:
        print('cancelChatInvitation requires 1 args')
        sys.exit(1)
    pp.pprint(client.cancelChatInvitation(eval(args[0]),))

elif cmd == 'createChat':
    if len(args) != 1:
        print('createChat requires 1 args')
        sys.exit(1)
    pp.pprint(client.createChat(eval(args[0]),))

elif cmd == 'deleteSelfFromChat':
    if len(args) != 1:
        print('deleteSelfFromChat requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteSelfFromChat(eval(args[0]),))

elif cmd == 'deleteOtherFromChat':
    if len(args) != 1:
        print('deleteOtherFromChat requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteOtherFromChat(eval(args[0]),))

elif cmd == 'fetchOperations':
    if len(args) != 1:
        print('fetchOperations requires 1 args')
        sys.exit(1)
    pp.pprint(client.fetchOperations(eval(args[0]),))

elif cmd == 'fetchOps':
    if len(args) != 4:
        print('fetchOps requires 4 args')
        sys.exit(1)
    pp.pprint(client.fetchOps(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'findAndAddContactsByMid':
    if len(args) != 4:
        print('findAndAddContactsByMid requires 4 args')
        sys.exit(1)
    pp.pprint(client.findAndAddContactsByMid(eval(args[0]), args[1], eval(args[2]), args[3],))

elif cmd == 'findAndAddContactsByUserid':
    if len(args) != 3:
        print('findAndAddContactsByUserid requires 3 args')
        sys.exit(1)
    pp.pprint(client.findAndAddContactsByUserid(eval(args[0]), args[1], args[2],))

elif cmd == 'findContactByUserid':
    if len(args) != 1:
        print('findContactByUserid requires 1 args')
        sys.exit(1)
    pp.pprint(client.findContactByUserid(args[0],))

elif cmd == 'findChatByTicket':
    if len(args) != 1:
        print('findChatByTicket requires 1 args')
        sys.exit(1)
    pp.pprint(client.findChatByTicket(eval(args[0]),))

elif cmd == 'getAllChatMids':
    if len(args) != 2:
        print('getAllChatMids requires 2 args')
        sys.exit(1)
    pp.pprint(client.getAllChatMids(eval(args[0]), eval(args[1]),))

elif cmd == 'getProfile':
    if len(args) != 1:
        print('getProfile requires 1 args')
        sys.exit(1)
    pp.pprint(client.getProfile(eval(args[0]),))

elif cmd == 'getContact':
    if len(args) != 1:
        print('getContact requires 1 args')
        sys.exit(1)
    pp.pprint(client.getContact(args[0],))

elif cmd == 'getCountryWithRequestIp':
    if len(args) != 0:
        print('getCountryWithRequestIp requires 0 args')
        sys.exit(1)
    pp.pprint(client.getCountryWithRequestIp())

elif cmd == 'getServerTime':
    if len(args) != 0:
        print('getServerTime requires 0 args')
        sys.exit(1)
    pp.pprint(client.getServerTime())

elif cmd == 'getContacts':
    if len(args) != 1:
        print('getContacts requires 1 args')
        sys.exit(1)
    pp.pprint(client.getContacts(eval(args[0]),))

elif cmd == 'getAllContactIds':
    if len(args) != 1:
        print('getAllContactIds requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllContactIds(eval(args[0]),))

elif cmd == 'getChats':
    if len(args) != 1:
        print('getChats requires 1 args')
        sys.exit(1)
    pp.pprint(client.getChats(eval(args[0]),))

elif cmd == 'inviteIntoChat':
    if len(args) != 1:
        print('inviteIntoChat requires 1 args')
        sys.exit(1)
    pp.pprint(client.inviteIntoChat(eval(args[0]),))

elif cmd == 'reissueChatTicket':
    if len(args) != 1:
        print('reissueChatTicket requires 1 args')
        sys.exit(1)
    pp.pprint(client.reissueChatTicket(eval(args[0]),))

elif cmd == 'rejectChatInvitation':
    if len(args) != 1:
        print('rejectChatInvitation requires 1 args')
        sys.exit(1)
    pp.pprint(client.rejectChatInvitation(eval(args[0]),))

elif cmd == 'sendMessage':
    if len(args) != 2:
        print('sendMessage requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendMessage(eval(args[0]), eval(args[1]),))

elif cmd == 'unsendMessage':
    if len(args) != 2:
        print('unsendMessage requires 2 args')
        sys.exit(1)
    pp.pprint(client.unsendMessage(eval(args[0]), args[1],))

elif cmd == 'updateChat':
    if len(args) != 1:
        print('updateChat requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateChat(eval(args[0]),))

elif cmd == 'updateProfileAttribute':
    if len(args) != 3:
        print('updateProfileAttribute requires 3 args')
        sys.exit(1)
    pp.pprint(client.updateProfileAttribute(eval(args[0]), eval(args[1]), args[2],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
